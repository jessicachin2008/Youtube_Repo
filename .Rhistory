else if (input$sleep >= 5 && input$sleep < 7) {
list(src = "pictures/Tired.png", height = 331, width = 300)
}
else if (input$sleep >= 7 && input$sleep <= 9) {
list(src = "pictures/Healthy.png", height = 331, width = 300)
}
else if (input$sleep > 9 && input$sleep <= 11) {
list(src = "pictures/Oversleep.png", height = 331, width = 300)
}
}, deleteFile = FALSE)
output$DASSscores <- renderTable({
DASSScore
})
}
)
runApp()
runApp()
library(shiny)
library(tibble)
happinessScore <- 10
count <- c(1)
shinyServer(
function(input, output, session) {
output$trend <- renderPlot({
sleep_data %>% # plot for first tab
select(input$select1, input$select2) %>%
ggplot(aes(x = sleep_data[[input$select1]],
y = sleep_data[[input$select2]], group = 1)) +
stat_smooth(method = "loess") +
labs(x = input$select1,
y = input$select2)})
output$barChart <- renderPlot({
combined_sleep_data %>% # plot for second tab
filter(AverageSleep < input$sleep + 1 &
AverageSleep > input$sleep - 1) %>%
ggplot(aes(x = GPA)) +
geom_histogram(binwidth = 0.5)})
# start for third tab
score <- reactiveValues(value = 10)
d <- c(0)
m <- c(10)
values <- reactiveValues(df = data.frame(D=d, Score=m))
vector.is.empty <- function(x) return(length(x) ==0 )
observeEvent(input$simulate, {
sleepHours <- as.numeric(input$hoursOfSleep)
depressionLevel <- as.numeric(input$depressionLevel)
anxietyLevel <- as.numeric(input$anxietyLevel)
stressLevel <- as.numeric(input$stressLevel)
numberOfDrinks <- as.numeric(input$numberOfDrinks)
if (sleepHours >= 3 && sleepHours <= 5) {
sleepHours <- -7
} else if (sleepHours >= 10 && sleepHours <= 13) {
sleepHours <- -3
} else {
sleepHours <- 1
}
happinessScore <- happinessScore + 0.37 * (depressionLevel) +
0.5 * (anxietyLevel) + 0.25 * (stressLevel) -
0.1 * (numberOfDrinks) + 0.59 * (sleepHours)
if (happinessScore > 10) {
happinessScore <- 10
} else if (happinessScore < 1) {
happinessScore <- 1
}
score$value <- round(happinessScore)
d_new <- c(values$df$D,as.numeric(input$simulate))
m_d_new <- c(values$df$Score,round(happinessScore))
values$df <- data.frame(D=d_new,Score=m_d_new)
})
observeEvent(input$reset, {
updateSliderInput(session, "hoursOfSleep", value = 7)
updateSliderInput(session, "numberOfDrinks", value = 0)
updateSelectInput(session, "depressionLevel", selected = 1)
updateSelectInput(session, "anxietyLevel", selected = 1)
updateSelectInput(session, "stressLevel", selected = 1)
score$value <- 10
d <- c(0)
m <- c(10)
values$df <- data.frame(D=d,Score=m)
})
output$HappinessScore <- renderPrint({
paste("Happiness Score: ", score$value)
})
newEntry <- observeEvent(input$simulate,{
})
output$happinessPlot <- renderPlot({
# hist(values$df$Score)
values$df %>%
ggplot(aes(values$df$d, values$df$Score)) +
geom_curve() +
xlim(0, 10) +
ylim(0, 10)
})
# output$HappinessScore <- renderPrint({
#    paste("Happiness Score: ", ObjReact())})
output$img1 <- renderImage({ #This is where the image is set
if (input$sleep >= 3 && input$sleep < 5) {
list(src = "pictures/Dead.png", height = 331, width = 300)
}
else if (input$sleep >= 5 && input$sleep < 7) {
list(src = "pictures/Tired.png", height = 331, width = 300)
}
else if (input$sleep >= 7 && input$sleep <= 9) {
list(src = "pictures/Healthy.png", height = 331, width = 300)
}
else if (input$sleep > 9 && input$sleep <= 11) {
list(src = "pictures/Oversleep.png", height = 331, width = 300)
}
}, deleteFile = FALSE)
output$DASSscores <- renderTable({
DASSScore
})
}
)
runApp()
runApp()
runApp()
library(shiny)
library(tibble)
happinessScore <- 10
count <- c(1)
shinyServer(
function(input, output, session) {
output$trend <- renderPlot({
sleep_data %>% # plot for first tab
select(input$select1, input$select2) %>%
ggplot(aes(x = sleep_data[[input$select1]],
y = sleep_data[[input$select2]], group = 1)) +
stat_smooth(method = "loess") +
labs(x = input$select1,
y = input$select2)})
output$barChart <- renderPlot({
combined_sleep_data %>% # plot for second tab
filter(AverageSleep < input$sleep + 1 &
AverageSleep > input$sleep - 1) %>%
ggplot(aes(x = GPA)) +
geom_histogram(binwidth = 0.5)})
# start for third tab
score <- reactiveValues(value = 10)
d <- c(0)
m <- c(10)
values <- reactiveValues(df = data.frame(D=d, Score=m))
vector.is.empty <- function(x) return(length(x) ==0 )
observeEvent(input$simulate, {
sleepHours <- as.numeric(input$hoursOfSleep)
depressionLevel <- as.numeric(input$depressionLevel)
anxietyLevel <- as.numeric(input$anxietyLevel)
stressLevel <- as.numeric(input$stressLevel)
numberOfDrinks <- as.numeric(input$numberOfDrinks)
if (sleepHours >= 3 && sleepHours <= 5) {
sleepHours <- -7
} else if (sleepHours >= 10 && sleepHours <= 13) {
sleepHours <- -3
} else {
sleepHours <- 1
}
happinessScore <- happinessScore + 0.37 * (depressionLevel) +
0.5 * (anxietyLevel) + 0.25 * (stressLevel) -
0.1 * (numberOfDrinks) + 0.59 * (sleepHours)
if (happinessScore > 10) {
happinessScore <- 10
} else if (happinessScore < 1) {
happinessScore <- 1
}
score$value <- round(happinessScore)
d_new <- c(values$df$D,as.numeric(input$simulate))
m_d_new <- c(values$df$Score,round(happinessScore))
values$df <- data.frame(D=d_new,Score=m_d_new)
})
observeEvent(input$reset, {
updateSliderInput(session, "hoursOfSleep", value = 7)
updateSliderInput(session, "numberOfDrinks", value = 0)
updateSelectInput(session, "depressionLevel", selected = 1)
updateSelectInput(session, "anxietyLevel", selected = 1)
updateSelectInput(session, "stressLevel", selected = 1)
score$value <- 10
d <- c(0)
m <- c(10)
values$df <- data.frame(D=d,Score=m)
})
output$HappinessScore <- renderPrint({
paste("Happiness Score: ", score$value)
})
newEntry <- observeEvent(input$simulate,{
})
output$happinessPlot <- renderPlot({
# hist(values$df$Score)a
ggplot(values$df, aes(values$df$d, values$df$Score)) +
geom_point() +
xlim(0, 10) +
ylim(0, 10)
})
# output$HappinessScore <- renderPrint({
#    paste("Happiness Score: ", ObjReact())})
output$img1 <- renderImage({ #This is where the image is set
if (input$sleep >= 3 && input$sleep < 5) {
list(src = "pictures/Dead.png", height = 331, width = 300)
}
else if (input$sleep >= 5 && input$sleep < 7) {
list(src = "pictures/Tired.png", height = 331, width = 300)
}
else if (input$sleep >= 7 && input$sleep <= 9) {
list(src = "pictures/Healthy.png", height = 331, width = 300)
}
else if (input$sleep > 9 && input$sleep <= 11) {
list(src = "pictures/Oversleep.png", height = 331, width = 300)
}
}, deleteFile = FALSE)
output$DASSscores <- renderTable({
DASSScore
})
}
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(tibble)
happinessScore <- 10
count <- c(1)
shinyServer(
function(input, output, session) {
output$trend <- renderPlot({
sleep_data %>% # plot for first tab
select(input$select1, input$select2) %>%
ggplot(aes(x = sleep_data[[input$select1]],
y = sleep_data[[input$select2]], group = 1)) +
stat_smooth(method = "loess") +
labs(x = input$select1,
y = input$select2)})
output$barChart <- renderPlot({
combined_sleep_data %>% # plot for second tab
filter(AverageSleep < input$sleep + 1 &
AverageSleep > input$sleep - 1) %>%
ggplot(aes(x = GPA)) +
geom_histogram(binwidth = 0.5)})
# start for third tab
score <- reactiveValues(value = 10)
d <- c(0)
m <- c(10)
values <- reactiveValues(df = data.frame(D=d, Score=m))
vector.is.empty <- function(x) return(length(x) ==0 )
observeEvent(input$simulate, {
sleepHours <- as.numeric(input$hoursOfSleep)
depressionLevel <- as.numeric(input$depressionLevel)
anxietyLevel <- as.numeric(input$anxietyLevel)
stressLevel <- as.numeric(input$stressLevel)
numberOfDrinks <- as.numeric(input$numberOfDrinks)
if (sleepHours >= 3 && sleepHours <= 5) {
sleepHours <- -7
} else if (sleepHours >= 10 && sleepHours <= 13) {
sleepHours <- -3
} else {
sleepHours <- 1
}
happinessScore <- happinessScore + 0.37 * (depressionLevel) +
0.5 * (anxietyLevel) + 0.25 * (stressLevel) -
0.1 * (numberOfDrinks) + 0.59 * (sleepHours)
if (happinessScore > 10) {
happinessScore <- 10
} else if (happinessScore < 1) {
happinessScore <- 1
}
score$value <- round(happinessScore)
d_new <- c(values$df$D,as.numeric(input$simulate))
m_d_new <- c(values$df$Score,round(happinessScore))
values$df <- data.frame(D=d_new,Score=m_d_new)
})
observeEvent(input$reset, {
updateSliderInput(session, "hoursOfSleep", value = 7)
updateSliderInput(session, "numberOfDrinks", value = 0)
updateSelectInput(session, "depressionLevel", selected = 1)
updateSelectInput(session, "anxietyLevel", selected = 1)
updateSelectInput(session, "stressLevel", selected = 1)
score$value <- 10
d <- c(0)
m <- c(10)
values$df <- data.frame(D=d,Score=m)
})
output$HappinessScore <- renderPrint({
paste("Happiness Score: ", score$value)
})
output$happinessPlot <- renderPlot({
#hist(values$df$Score)
values$df %>%
ggplot(aes(x=values$df$Score)) +
geom_histogram(binwidth = 1) +
ylim(0, 10)
})
output$happinessPlot <- renderPlot({
values$df %>%
ggplot(aes(x=values$df$Score)) +
geom_histogram(binwidth = 1) +
scale_x_continuous(name = "Happiness Score") +
scale_y_continuous(name = "Count")
ylim(0, 10)
})
# output$HappinessScore <- renderPrint({
#    paste("Happiness Score: ", ObjReact())})
output$img1 <- renderImage({ #This is where the image is set
if (input$sleep >= 3 && input$sleep < 5) {
list(src = "pictures/Dead.png", height = 331, width = 300)
}
else if (input$sleep >= 5 && input$sleep < 7) {
list(src = "pictures/Tired.png", height = 331, width = 300)
}
else if (input$sleep >= 7 && input$sleep <= 9) {
list(src = "pictures/Healthy.png", height = 331, width = 300)
}
else if (input$sleep > 9 && input$sleep <= 11) {
list(src = "pictures/Oversleep.png", height = 331, width = 300)
}
}, deleteFile = FALSE)
output$DASSscores <- renderTable({
DASSScore
})
}
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(rlang)
library(shinythemes)
url <- a("Survey Link", href = "https://www.psytoolkit.org/cgi-bin/psy2.4.1/survey?s=A4fYA")
sleep_data <- read.csv("data/sleep_study.csv") %>%
select(GPA, DepressionScore, AnxietyScore,
StressScore, AlcoholUse, AverageSleep, Drinks)
combined_sleep_data <- read.csv("data/combined_sleep_gpa.csv")
DASSScore <- read.csv("data/dassscore.csv")
shinyUI(fluidPage(theme = shinytheme("darkly"),
titlePanel(title = "Why Should We Sleep?"), #title
navbarPage("Sections",
tabPanel("Trend Lines", # first tab
sidebarLayout(
sidebarPanel(
selectInput("select1", label = h4("Parameter 1 (X)"),
choices = list("Depression Score" =
"DepressionScore",
"Anxiety Score" = "AnxietyScore",
"Stress Score" = "StressScore",
"Number of Drinks" = "Drinks",
"Average Sleep" = "AverageSleep",
"GPA" = "GPA"),
selected = "GPA"),
selectInput("select2", label = h4("Parameter 2 (Y)"),
choices = list("Depression Score" =
"DepressionScore",
"Anxiety Score" = "AnxietyScore",
"Stress Score" = "StressScore",
"Number of Drinks" = "Drinks",
"Average Sleep" = "AverageSleep",
"GPA" = "GPA"),
selected = "AverageSleep"),
HTML("The purpose of this information visualization is to allow the user to see the relationship between different
variables and see how it could influence their life. The variables that can be shown on the graph are Depression
Score, Anxiety Score, Stress Score, number of drinks, and average sleep.")
),
mainPanel(
plotOutput("trend")
))),
tabPanel("Slider", # second tab
sidebarPanel(
sliderInput(
inputId = "sleep",
label = "Average hours of sleep per night",
min = 3,
max = 11,
value = 7
),
imageOutput("img1")),
mainPanel(
HTML("This slider allows you to adjust number of hours
of sleep. A graph will be created to depict the number of
people who received a certain grademark correlated to the
hours of sleep they get. <em>**Keep in mind that these data points
are based on collected data from one school and does not
represent a direct relationship between GPA and hours of sleep.</em><br>"),
plotOutput("barChart")
)),
tabPanel("Sleep Simulation", # third tab
sidebarPanel(
sliderInput(
inputId = "hoursOfSleep",
label = "Please specify hours of sleep",
min = 3,
max = 11,
value = 7
),
selectInput("depressionLevel",
label = h3("Please choose depression level"),
choices = list("Normal" = 1, "Moderate" = -2,
"Severe" = -5),
selected = 1),
selectInput("anxietyLevel",
label = h3("Please choose anxiety level"),
choices = list("Normal" = 1, "Moderate" = -2,
"Severe" = -5),
selected = 1),
selectInput("stressLevel",
label = h3("Please choose stress level"),
choices = list("Normal" = 1, "Moderate" = -2,
"Severe" = -5),
selected = 1),
sliderInput(
inputId = "numberOfDrinks",
label = "Please specify amount of drinks taken",
min = 0,
max = 24,
value = 0
),
splitLayout(cellWidths = c("30%", "20%"),
actionButton("simulate", label = "Simulate"),
actionButton("reset", label = "Reset"))
),
mainPanel(
HTML("<h1>Sleep Simulation</h1>
In this section of our application, we are simulating
how the variables; hours of sleep, depression level, anxiety level,
stress level, and the numbers of drinks might affect your
overall happiness level. Everytime you press the simulate button,
it simulates one day's happiness score. To convey this information,
we decided to use a histogram so that the user could see the spread
of the happiness scores and how often they would get a certain score.
The way we determined the
happiness score was by finding the line of regression
for each variable and compared to the happiness score
that was provided in the data. Using this, We formulated
an equation that can determine the happiness level of the
person (on a scale from 1-10, 10 being the happiest). Keep
in mind that this scale is purely based on past data, so these
numbers are not completely accurate. <br> <br>"),
textOutput("HappinessScore"),
br(),
plotOutput("happinessPlot")
)),
tabPanel("Do It Yourself",
mainPanel(
HTML("These scores are all based on data collected through Viterbo University. The
data was obtained from a sample of students who did skills tests to measure
cognitive function, completed a survey asking about attitudes and habits,
and kept a sleep diary to record time and quality of sleep over a two-week
period in 2016. <br> <br>"),
HTML("<em> <b>You should not self-diagnose based on these scores - these visualizations are
purely based on data collected through one specific school. </em> </b> <br> <br>"),
HTML("You can calculate your own DASS Score (Depression, Anxiety, Stress Scores)
on the link below. After taking the survey, you may compare your scores to
the table to the right and find whether your Scores are Normal, Mild,
Moderate, Severe, or Extremely Severe - plug them into our visualizations
and see what your happinessScore might be. <br> <br>"),
tagList("URL Link:", url)),
HTML("Crisis Text Line: Text HOME to 741741<br>",
"Suicide Prevention Life Line: 1-800-273-8255<br>"),
tableOutput("DASSscores"),
),
tabPanel("About", # the about tab
mainPanel(
HTML("We decided to focus on sleep as our topic because, as college students, we wanted to know
how sleep affects college students. Stress, anxiety, and depression
can play a huge role on how many hours a person sleeps per day, and the opposite can also be true.
We wanted to observe how mental illness can affect someone's happiness and depicted
happiness score as one of our visualizations. The other two information
visualizations we created were sliders and trend lines, both based on the data we collected through Kaggle.com.
We hope that our project can help other college students who suffer from sleep deprivation
to get an idea on what factors can effect a person's sleep cycle. We do not
have any specific solutions but we did include information for users to
analyze and think about - what changes might you implement into your lives?
This project was done by Samuel Kim, Jessica Chin, and Abdirihman Mohamud.")
)))
)
)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
