<<<<<<< HEAD
}
}
# A2 foundational skills
# Set up and Defining variables ------------------------------------------------
# Load the the `stringr` package
# (you'll need to install it if you haven't used it before)
# It has a variety of functions that make working with string variables easier
# install.packages("stringr")
library("stringr")
# Create a numeric variable `my_age` that is equal to your age
my_age <- 20
# Create a variable `my_name` that is equal to your first name
my_name <- "Samuel"
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
minutes_in_a_day <- 60 * 24
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
hours_in_a_year <- 24 *  365
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
more_minutes_than_hours <- (minutes_in_a_day > hours_in_a_year)
# Working with functions -------------------------------------------------------
# Write a function `make_introduction()` that takes in two args (`name`, `age`)
# This function should return a string value that says:
# Hello, my name is {name}, and I'm {age} years old.
# The values {name} and {age} should take on the values passed into the function
# Make sure that proper spacing is used (e.g., you shouldn't have multiple
# spaces between words, and you should a space after a comma)
make_introduction <- function(name, age) {
paste("Hello, my name is ", name, ", and I'm ", age, " years old.", sep = "")
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction("Samuel", 20)
# Create a variable `casual_intro` by substituting "Hello, my name is",
# with "Hey, I'm" in your `my_intro` variable
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
# You should do this by using a function to convert your `my_intro` variable
# into all capital letters.
loud_intro <- toupper(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
# You should do this by using a function to convert your `my_intro` variable
# into all lower-case letters.
quiet_intro <- tolower(my_intro)
# Create a new variable `capitalized_intro`, which is your `my_intro` variable,
# but with each word capitalized. hint: use the stringr function `str_to_title`
capitalized_intro <- str_to_title(my_intro)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurrences <- str_count(my_intro, "e")
# Write a function `double()` that takes in a value and
# returns that value times two
double <- function(value) {
value * 2
}
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
minutes_in_two_days <- double(minutes_in_a_day)
# Write a function `cube()` that takes in a value and returns that value cubed
cube <- function(value) {
value^3
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
# Create a function `inches_to_cm` that converts from inches to centimeters
inches_to_cm <- function(inches) {
inches * 2.54
}
# Create a variable `inches_tall` that is your (numeric) height in inches
inches_tall <- 70
# Using your `inches_to_cm` function and your `inches_tall` variable,
# create a variable `cm_tall` that is your height in centimeters
cm_tall <- inches_to_cm(inches_tall)
# Write a function `has_more_zs` to determine which of two strings contains
# more instances of the letter "z". It should take as parameters two string
# variables, and return the argument which has more occurances of the letter "z"
# If neither phrase contains the letter "z", it should return:
# "Neither string contains the letter z."
# If the phrases contain the same number of "z"s, it should return:
# "The strings have the same number of Zs."
# The function must work for both capital and lowercase "z"s.
has_more_zs <- function(String1, String2) {
count1 <- str_count(tolower(String1), "z")
count2 <- str_count(tolower(String2), "z")
if(count1 > count2) {
print("the first string contains more zs")
} else if(count1 < count2) {
print("The second string contains more zs")
} else if(count1 == 0 && count2 == 0) {
print("Neither string contains z")
} else {
print("The strings have the same number of zs")
}
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("hello", "there")
print(more_zs)
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
# Create a vector `without_four` by omitting the fourth element from `movies`
# You should do this using a _negative index_
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
# Create a vector `multiples_of_8` by filtering your `multiples_of_4` variable
# down to only elements that are divisible by 8.
# Create a vector `numbers` that is the numbers 700 through 999
# Using the built in `length()` function, create a variable `numbers_len`
# that is equal to the length of your vector `numbers`
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
# Create a vector `lower_numbers` that the values in your `numbers` vector
# that are lower than `numbers_mean` (you should do this using vector filtering)
# Create a vector `higher_numbers` that the values in your `numbers` vector
# that are higher than `numbers_mean` (again, using vector filtering)
# Lists ------------------------------------------------------------------------
# Create a list called `summary_info` in which you'll store summary information
# about the `numbers` vector above. The list should have the following keys:
# - `length`: in which you'll store the length of the vector
# - `mean`: in which you'll store the mean of the vector
# - `median`: in which you'll store the median of the vector
# Now, write a function called `summarize_vector` that takes in a vector of
# numbers, and returns a list of summary information about that vector
# (including the mean, median, and length)
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
has_more_zs <- function(String1, String2) {
count1 <- str_count(tolower(String1), "z")
count2 <- str_count(tolower(String2), "z")
if(count1 > count2) {
print("the first string contains more zs")
} else if(count1 < count2) {
print("The second string contains more zs")
} else if(count1 == 0 && count2 == 0) {
print("Neither string contains z")
} else {
print("The strings have the same number of zs")
}
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("hello", "there")
has_more_zs <- function(String1, String2) {
count1 <- str_count(tolower(String1), "z")
count2 <- str_count(tolower(String2), "z")
if(count1 > count2) {
print("the first string contains more zs")
} else if(count1 < count2) {
print("The second string contains more zs")
} else if(count1 == 0 && count2 == 0) {
print("Neither string contains z")
} else {
print("The strings have the same number of zs")
}
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("zeze", "there")
has_more_zs <- function(String1, String2) {
count1 <- str_count(tolower(String1), "z")
count2 <- str_count(tolower(String2), "z")
if(count1 > count2) {
print("the first string contains more zs")
} else if(count1 < count2) {
print("The second string contains more zs")
} else if(count1 == 0 && count2 == 0) {
print("Neither string contains z")
} else {
print("The strings have the same number of zs")
}
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("zeze", "zeze")
remove_digits <- function(strings) {
str_extract(strings, "[a-z]+")
}
remove_digits <- function(strings) {
str_extract(strings, "[a-z]+")
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
remove_digits <- function(strings) {
str_extract(strings, "[0-9]+")
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
remove_digits <- function(strings) {
str_extract_all(strings, "[a-z]+")
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
remove_digits <- function(strings) {
str_extract(strings, "[a-z]+")
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
remove_digits <- function(strings) {
gsub('[[:digit:]]+', '', strings)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
double() <- function(value) {
value * 2
}
remove_digits <- function(strings) {
gsub('[[:digit:]]+', '', strings)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
summary_1_to_100 <- summarize_vector(c(1:100))
summarize_vector <- function(nums) {
list("length" = length(nums), "mean" = mean(nums), "median" = median(nums))
}
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector(c(1:100))
summarize_vector <- function(nums) {
list("length" = length(nums), "mean" = mean(nums), "median" = median(nums))
}
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector(c(1:100))
print(summary_1_to_100)
print(mean(c(1:100)))
setwd("~/Info201/team_won")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
=======
arrange(desc(num_affected)) %>%
select(city) %>%
head(1)
# The city that was most impacted by the shootings was the total number of injuries and deaths in that row.
most_shootings_state <- shooting_data %>%
group_by(state) %>%
count(vars = "count_of_state") %>%
arrange(desc(n)) %>%
select(state) %>%
head(1) %>%
unlist
# The number of counts of mass shootings per state.
most_lives_lost_date <- shooting_data %>%
arrange(desc(num_killed)) %>%
select(date) %>%
head(1) %>%
unlist
# The date of when the most amount of people were killed.
content <- paste(shooting_data$city,
shooting_data$address,
shooting_data$date, sep = "<br/>")
interactive_map <- leaflet(shooting_data) %>%
addTiles %>%
addCircleMarkers(
radius = ~(shooting_data$num_killed + shooting_data$num_injured),
stroke = FALSE, fillOpacity = 0.5
) %>%
addCircles(popup = ~content)
num_affected <- shooting_data$num_injured + shooting_data$num_killed
other_plot <- ggplot(shooting_data) +
geom_col(mapping = aes(x = state, y = num_affected)) +
coord_flip()
source('C:/Users/Jessica/Desktop/School/Junior/Coding/a5-b-jessicachin2008/analysis.R')
source('C:/Users/Jessica/Desktop/School/Junior/Coding/a5-b-jessicachin2008/analysis.R')
View(other_plot)
other_plot
knitr::opts_chunk$set(error = TRUE)
knitr::opts_chunk$set(error = TRUE)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(leaflet)
shooting_data <- read_csv("data/shootings-2018.csv")
source("analysis.R")
knitr::opts_chunk$set(error = TRUE)
knitr::opts_chunk$set(error = TRUE)
date_of_event <- shooting_data %>%
filter(num_killed == "13")
View(date_of_event)
date_of_event <- shooting_data %>%
filter(num_killed == "13") %>%
select(date)
View(date_of_event)
date_of_event <- shooting_data %>%
filter(num_killed == "13") %>%
select(date) %>%
unlist
print(date_of_event)
location_of_event <- shooting_data %>%
filter(date == date_of_event) %>%
select(state, city)
View(location_of_event)
location_of_event <- shooting_data %>%
filter(date == date_of_event) %>%
select(state, city) %>%
unlist
print(lovation_of_event)
print(location_of_event)
>>>>>>> 8749de5509c54c0fa4705c59eac112a8983a8073
library(dplyr)
library(tidyverse)
library(ggplot)
library(plotly)
sleep_data <- read.csv("data/sleep_study.csv") %>%
select(GPA, DepressionScore, AnxietyScore, StressScore, AlcoholUse, AverageSleep, Drinks)
scatterplot <- sleep_data %>%
ggplot(aes(x = AverageSleep, y = Drinks,
text = paste0("Depression Score: ", DepressionScore,
"\nAnxiety Score: ", AnxietyScore,
"\nStress Score: ", StressScore,
"\nAlcohol Use: ", AlcoholUse,
"\nAverage Sleep: ", AverageSleep))) +
geom_point()
ggplotly(scatterplot)
library(dplyr)
library(tidyverse)
library(ggplot)
library(plotly)
sleep_data <- read.csv("data/sleep_study.csv") %>%
select(GPA, DepressionScore, AnxietyScore, StressScore, AlcoholUse, AverageSleep, Drinks)
scatterplot <- sleep_data %>%
ggplot(aes(x = AverageSleep, y = Drinks,
text = paste0("Depression Score: ", DepressionScore,
"\nAnxiety Score: ", AnxietyScore,
"\nStress Score: ", StressScore,
"\nAlcohol Use: ", AlcoholUse,
"\nAverage Sleep: ", AverageSleep))) +
geom_point()
<<<<<<< HEAD
ggplotly(scatterplot)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
sleep_data[sample(nrow(df), 3), ]
runApp()
runApp()
sample_n(sleep_data, 10)
sample_n(sleep_data, 10)
sample_n(sleep_data, 10)
sample_n(sleep_data, 10)
sample_n(sleep_data, 10)
sample_n(sleep_data, 10)
sample_n(sleep_data, 10)
sample_n(sleep_data, 10)
sample_n(sleep_data, 10)
sample_n(sleep_data, 10)
sample_n(sleep_data, 10)
sample_n(sleep_data, 10) %>%
select("AverageSleep", "AnxietyScore")
sample_n(sleep_data, 10) %>%
select("AverageSleep", "AnxietyScore")
sample_n(sleep_data, 10) %>%
select("AverageSleep", "AverageSleep")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
output$scatterplot <- renderPlot({ sleep_data %>%
select(input$select1, input$select2) %>%
ggplot(aes(x = sleep_data[[input$select1]] , y = sleep_data[[input$select2]], group = 1)) +
stat_smooth(method = "loess") +
labs(x = input$select1,
y = input$select2)
})
runApp()
runApp()
combined_sleep_data <- read.csv("data/combined_sleep_gpa.csv")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
happinessScore <- 100
runApp()
runApp()
happinessScore <- 10
maxScore <- 10
minScore <- 0
runApp()
runApp()
test <- 100
runApp()
calculateHappiness <- happinessScore + 0.37(input$depressionLevel) + 0.5(input$anxietyLevel) +
0.25(input$stressLevel) - 0.1(input$numberOfDrinks)
calculateHappiness <- happinessScore + 0.37*(input$depressionLevel) + 0.5*(input$anxietyLevel) +
0.25*(input$stressLevel) - 0.1*(input$numberOfDrinks)
runApp()
ObjReact <- reactive({
hoursOfSleep <- as.numeric(input$hoursOfSleep)
depressionLevel <- as.numeric(input$depressionLevel)
anxietyLevel <- as.numeric(input$anxietyLevel)
stressLevel <- as.numeric(input$stressLevel)
numberOfDrinks <- as.numeric(input$numberOfDrinks)
happinessScore <- happinessScore + 0.37 * (depressionLevel) + 0.5 * (anxietyLevel) +
0.25 * (stressLevel) - 0.1 * (numberOfDrinks)
return(happinessScore)
})
runApp()
reactive <- eventReactive( input$simulate, {
input$hoursOfSleep
input$depressionLevel
input$anxietyLevel
input$stressLevel
input$numberOfDrinks
})
runApp()
ObjReact <- reactive(input$simulate, {
hoursOfSleep <- as.numeric(input$hoursOfSleep)
depressionLevel <- as.numeric(input$depressionLevel)
anxietyLevel <- as.numeric(input$anxietyLevel)
stressLevel <- as.numeric(input$stressLevel)
numberOfDrinks <- as.numeric(input$numberOfDrinks)
happinessScore <- happinessScore + 0.37 * (depressionLevel) + 0.5 * (anxietyLevel) +
0.25 * (stressLevel) - 0.1 * (numberOfDrinks)
if (happinessScore > 10) {
happinessScore <- 10
} else if(happinessScore < 1) {
happinessScore <- 1
}
return(round(happinessScore))
})
ObjReact <- eventReactive(input$simulate, {
hoursOfSleep <- as.numeric(input$hoursOfSleep)
depressionLevel <- as.numeric(input$depressionLevel)
anxietyLevel <- as.numeric(input$anxietyLevel)
stressLevel <- as.numeric(input$stressLevel)
numberOfDrinks <- as.numeric(input$numberOfDrinks)
happinessScore <- happinessScore + 0.37 * (depressionLevel) + 0.5 * (anxietyLevel) +
0.25 * (stressLevel) - 0.1 * (numberOfDrinks)
if (happinessScore > 10) {
happinessScore <- 10
} else if(happinessScore < 1) {
happinessScore <- 1
}
return(round(happinessScore))
})
runApp()
observeEvent(input$reset, {
reset("hoursOfSleep")
})
runApp()
observeEvent(input$reset, {
reset("hoursOfSleep")
})
runApp()
runApp()
runApp()
if (hoursOfSleep >= 3 || hoursOfSleep <= 6) {
hoursOfSleep <- hoursOfSleep * -1
}
if (hoursOfSleep >= 3 || hoursOfSleep <= 6) {
hoursOfSleep <- hoursOfSleep * -1
}
if (sleepHours >= 3 || sleepHours <= 6) {
sleepHours <- sleepHours * -1
}
sleepHours <- as.numeric(input$hoursOfSleep)
depressionLevel <- as.numeric(input$depressionLevel)
anxietyLevel <- as.numeric(input$anxietyLevel)
stressLevel <- as.numeric(input$stressLevel)
numberOfDrinks <- as.numeric(input$numberOfDrinks)
if (sleepHours >= 3 || sleepHours <= 6) {
sleepHours <- sleepHours * -1
}
runApp()
=======
gapminder_asia_2007 %>%
ggplot(aes(lifeExp,
fct_reorder(country, lifeExp),
color = pop)) +
geom_point()
gapminder_asia_2007 <- gapminder %>% filter(year == 2007, continent == 'Asia')
gapminder_asia_2007 %>%
ggplot(aes(lifeExp, country)) +
geom_point()
gapminder_asia_2007 %>%
ggplot(aes(lifeExp,
fct_reorder(country, lifeExp),
color = pop)) +
geom_point()
tree_data <- tree_names %>% mutate(tree_names = as_fator(tree_names))
tree_data <- tree_data %>% mutate(tree_names = as_fator(tree_names))
tree_data <- tree_data %>% mutate(tree_names = as_factor(tree_names))
tree_data %>% ggplot(aes(tree_names, tree_heights)) + geom_bar()
tree_data %>% ggplot(aes(tree_names, tree_heights)) + geom_col()
tree_data %>% ggplot(aes(tree_names, tree_heights), fct_reorder(tree_heights)) + geom_col()
tree_data %>% ggplot(aes(tree_names, tree_heights), fct_reorder(tree_heights, tree_names)) + geom_col()
tree_data %>% ggplot(aes(tree_names, tree_heights), fct_infreq(tree_heights)) + geom_col()
library(stringr)
glimpse(stringr)
View(stringr)
View("stringr")
View(fruit)
str_c("pine", "apple")
str_c("pine", "apple", "s")
str_c("crab", "apple", sep = " ")
str_c(c("pine", "crab"), "apple")
str_c(c("pine", "crab"), "apple", collapse = " ")
str_c(c(fruit), sep = ", ")
str_c(c(fruit), collapse = ", ")
str_subset(fruit, "^a")
str_detect(fruit, "^a")
fruit_data <- data_frame(fruit)
fruit_data <- data.frame(fruit)
fruit_data %>%
filter(str_detect(fruit, "^a"))
fruit_data <- data_frame(fruit)
fruit_data <- data_frame(fruit)
library(tidyverse)
fruit_data <- data_frame(fruit)
fruit_data %>%
filter(str_detect(fruit, "^a"))
str_subset(fruit, $a)
str_subset(fruit, "$a")
str_subset(fruit, "a$")
str_subset(fruit, "a$")
fruit_data $>$
str_subset(fruit, "a$")
fruit_data %>%
filter(str_detect(fruit, "a$"))
str_extract(fruit, "fruit|berry|melon")
library(gapminder)
glimpse(gapminder)
library(forcats)
fruit_data %>%
str_extract(fruit, "fruit|berry|melon") %>%
ggplot(aes(x = fruit, y = count)) +
geom_bar()
fruit_data %>%
#str_extract(fruit, "fruit|berry|melon") %>%
ggplot(aes(x = fruit, y = count)) +
geom_bar()
fruit_data %>%
#str_extract(fruit, "fruit|berry|melon") %>%
ggplot(aes(x = fruit)) +
geom_bar()
fruit_data %>%
str_extract(fruit, "fruit|berry|melon") %>%
ggplot(aes(x = fruit)) +
geom_bar()
str_extract(fruit, "fruit|berry|melon") %>%
ggplot(aes(x = fruit)) +
geom_bar()
extracted <- data_frame(str_extract(fruit, "fruit|berry|melon")) %>%
# str_extract(fruit, "fruit|berry|melon") %>%
ggplot(aes(x = fruit)) +
geom_bar()
extracted <- data_frame(str_extract(fruit, "fruit|berry|melon"))
extracted %>%
# str_extract(fruit, "fruit|berry|melon") %>%
ggplot(aes(x = fruit)) +
geom_bar()
View(extracted)
extracted <- data_frame(str_extract(fruit, "fruit|berry|melon"))
extracted %>%
# str_extract(fruit, "fruit|berry|melon") %>%
ggplot(aes(x = extracted)) +
geom_bar()
extracted <- data_frame(summarize(str_extract(fruit, "fruit|berry|melon")))
extracted <- data_frame(str_extract(fruit, "fruit|berry|melon")) %>%
summarize()
View(extracted)
extracted <- data_frame(str_extract(fruit, "fruit|berry|melon"))
View(extracted)
listed <- str_extract(fruit, "fruit|berry|melon")
str_extract(fruit, "fruit|berry|melon")
extracted <- data_frame(str_extract(fruit, "fruit|berry|melon")) %>%
count(vars = "total")
View(extracted)
extracted <- data_frame(str_extract(fruit, "fruit|berry|melon")) %>%
summarize(count())
extracted <- data_frame(str_extract(fruit, "fruit|berry|melon")) %>%
summarize(count(fruit))
extracted <- summarize(count(data_frame(str_extract(fruit, "fruit|berry|melon"))))
View(extracted)
extracted <- count(data_frame(str_extract(fruit, "fruit|berry|melon")))
View(extracted)
extracted <- data_frame(str_extract(fruit, "fruit|berry|melon")) %>%
sum(str_count())
extracted <- data_frame(str_extract(fruit, "fruit|berry|melon")) %>%
View(extracted)
extracted <- data_frame(str_extract(fruit, "fruit|berry|melon")) %>%
mutate(sum = sum(str_count("fruit")))
View(extracted)
shiny::runApp('C:/Users/Jessica/Desktop/School/Junior/INFO Group/team_won')
runApp('C:/Users/Jessica/Desktop/School/Junior/INFO Group/team_won')
setwd("C:/Users/Jessica/Desktop/School/Junior/INFO Group/team_won")
sleep_data <- read.csv("data/sleep_study.csv") %>%
select(GPA, DepressionScore, AnxietyScore,
StressScore, AlcoholUse, AverageSleep, Drinks)
combined_sleep_data <- read.csv("data/combined_sleep_gpa.csv")
>>>>>>> 8749de5509c54c0fa4705c59eac112a8983a8073
runApp()
runApp()
lintr:::addin_lint()
runApp()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
runApp()
<<<<<<< HEAD
install.packages('rsconnect')
rsconnect::setAccountInfo(name='samuel-yj-kim',
token='D5EE60AC67B7452F0220C2D48669CEEA',
secret='<SECRET>')
rsconnect::setAccountInfo(name='samuel-yj-kim',
token='D5EE60AC67B7452F0220C2D48669CEEA',
secret='<SECRET>')
rsconnect::setAccountInfo(name='samuel-yj-kim',
token='970F40C25ECDCF08035E3C5C985836EC',
secret='<SECRET>')
Sys.setlocale(locale="English")
rsconnect::setAccountInfo(name='samuel-yj-kim',
token='970F40C25ECDCF08035E3C5C985836EC',
secret='<SECRET>')
rsconnect::setAccountInfo(name='samuel-yj-kim',
token='970F40C25ECDCF08035E3C5C985836EC',
secret='ABHnXwuT4CeEhRXfkuKZaU2catfPjfX0dKSN218D')
library(rsconnect)
rsconnect::deployApp('C:\Users\samuelkim\Documents\Info201\team_won')
rsconnect::deployApp('Users\samuelkim\Documents\Info201\team_won')
=======
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
>>>>>>> 8749de5509c54c0fa4705c59eac112a8983a8073
runApp()
install.packages(c('ggplot2', 'shiny'))
install.packages(c("ggplot2", "shiny"))
install.packages(c("ggplot2", "shiny"))
shiny::runApp()
library(rsconnect)
deployApp()
install.packages('rlang')
install.packages("rlang")
install.packages("rlang")
library(rlang)
remove.packages("rlang", lib="~/R/win-library/3.6")
install.packages('rlang')
install.packages("rlang")
