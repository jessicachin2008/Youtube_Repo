# Create a new variable `capitalized_intro`, which is your `my_intro` variable,
# but with each word capitalized. hint: use the stringr function `str_to_title`
capitalized_intro <- str_to_title(my_intro)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurrences <- str_count(my_intro, "e")
# Write a function `double()` t
# A2 foundational skills
# Set up and Defining variables ------------------------------------------------
# Load the the `stringr` package
# (you'll need to install it if you haven't used it before)
# It has a variety of functions that make working with string variables easier
# install.packages("stringr")
library("stringr")
# Create a numeric variable `my_age` that is equal to your age
my_age <- 20
# Create a variable `my_name` that is equal to your first name
my_name <- "Samuel"
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
minutes_in_a_day <- 60 * 24
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
hours_in_a_year <- 24 *  365
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
more_minutes_than_hours <- (minutes_in_a_day > hours_in_a_year)
# Working with functions -------------------------------------------------------
# Write a function `make_introduction()` that takes in two args (`name`, `age`)
# This function should return a string value that says:
# Hello, my name is {name}, and I'm {age} years old.
# The values {name} and {age} should take on the values passed into the function
# Make sure that proper spacing is used (e.g., you shouldn't have multiple
# spaces between words, and you should a space after a comma)
make_introduction <- function(name, age) {
paste("Hello, my name is ", name, ", and I'm ", age, " years old.", sep = "")
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction("Samuel", 20)
# Create a variable `casual_intro` by substituting "Hello, my name is",
# with "Hey, I'm" in your `my_intro` variable
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
# You should do this by using a function to convert your `my_intro` variable
# into all capital letters.
loud_intro <- toupper(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
# You should do this by using a function to convert your `my_intro` variable
# into all lower-case letters.
quiet_intro <- tolower(my_intro)
# Create a new variable `capitalized_intro`, which is your `my_intro` variable,
# but with each word capitalized. hint: use the stringr function `str_to_title`
capitalized_intro <- str_to_title(my_intro)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurrences <- str_count(my_intro, "e")
print(occurrences)
# Write a function `double()` that takes in a value and
# returns that value times two
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
# Write a function `cube()` that takes in a value and returns that value cubed
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
# Create a function `inches_to_cm` that converts from inches to centimeters
# Create a variable `inches_tall` that is your (numeric) height in inches
# Using your `inches_to_cm` function and your `inches_tall` variable,
# create a variable `cm_tall` that is your height in centimeters
# Write a function `has_more_zs` to determine which of two strings contains
# more instances of the letter "z". It should take as parameters two string
# variables, and return the argument which has more occurances of the letter "z"
# If neither phrase contains the letter "z", it should return:
# "Neither string contains the letter z."
# If the phrases contain the same number of "z"s, it should return:
# "The strings have the same number of Zs."
# The function must work for both capital and lowercase "z"s.
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
# Create a vector `without_four` by omitting the fourth element from `movies`
# You should do this using a _negative index_
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
# Create a vector `multiples_of_8` by filtering your `multiples_of_4` variable
# down to only elements that are divisible by 8.
# Create a vector `numbers` that is the numbers 700 through 999
# Using the built in `length()` function, create a variable `numbers_len`
# that is equal to the length of your vector `numbers`
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
# Create a vector `lower_numbers` that the values in your `numbers` vector
# that are lower than `numbers_mean` (you should do this using vector filtering)
# Create a vector `higher_numbers` that the values in your `numbers` vector
# that are higher than `numbers_mean` (again, using vector filtering)
# Lists ------------------------------------------------------------------------
# Create a list called `summary_info` in which you'll store summary information
# about the `numbers` vector above. The list should have the following keys:
# - `length`: in which you'll store the length of the vector
# - `mean`: in which you'll store the mean of the vector
# - `median`: in which you'll store the median of the vector
# Now, write a function called `summarize_vector` that takes in a vector of
# numbers, and returns a list of summary information about that vector
# (including the mean, median, and length)
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
double() <- function(value) {
values * 2
}
"double()" <- function(value) {
values * 2
}
"double()" <- function(value) {
values * 2
}
clear
double <- function(value) {
values * 2
}
print(double(2))
double <- function(value) {
value * 2
}
print(double(2))
cube <- function(value) {
value^3
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
cube <- function(value) {
value^3
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
print(twenty_seven)
inches_to_cm <- function(inches) {
inches * 2.54
}
# Create a variable `inches_tall` that is your (numeric) height in inches
inches_tall <- 70
# Using your `inches_to_cm` function and your `inches_tall` variable,
# create a variable `cm_tall` that is your height in centimeters
cm_tall <- inches_to_cm(inches_tall)
has_more_zs <- function(String1, String2) {
count1 <- str_count(tolower(String1), "z")
count2 <- str_count(tolower(String2), "z")
if(count1 > count2) {
print("the first string contains more zs")
} else if(count1 < count2) {
print("The second string contains more zs")
} else if(count1 == 0 && count2 == 0) {
print("Neither string contains z")
} else {
print("The strings have the same number of zs")
}
}
# A2 foundational skills
# Set up and Defining variables ------------------------------------------------
# Load the the `stringr` package
# (you'll need to install it if you haven't used it before)
# It has a variety of functions that make working with string variables easier
# install.packages("stringr")
library("stringr")
# Create a numeric variable `my_age` that is equal to your age
my_age <- 20
# Create a variable `my_name` that is equal to your first name
my_name <- "Samuel"
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
minutes_in_a_day <- 60 * 24
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
hours_in_a_year <- 24 *  365
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
more_minutes_than_hours <- (minutes_in_a_day > hours_in_a_year)
# Working with functions -------------------------------------------------------
# Write a function `make_introduction()` that takes in two args (`name`, `age`)
# This function should return a string value that says:
# Hello, my name is {name}, and I'm {age} years old.
# The values {name} and {age} should take on the values passed into the function
# Make sure that proper spacing is used (e.g., you shouldn't have multiple
# spaces between words, and you should a space after a comma)
make_introduction <- function(name, age) {
paste("Hello, my name is ", name, ", and I'm ", age, " years old.", sep = "")
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction("Samuel", 20)
# Create a variable `casual_intro` by substituting "Hello, my name is",
# with "Hey, I'm" in your `my_intro` variable
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
# You should do this by using a function to convert your `my_intro` variable
# into all capital letters.
loud_intro <- toupper(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
# You should do this by using a function to convert your `my_intro` variable
# into all lower-case letters.
quiet_intro <- tolower(my_intro)
# Create a new variable `capitalized_intro`, which is your `my_intro` variable,
# but with each word capitalized. hint: use the stringr function `str_to_title`
capitalized_intro <- str_to_title(my_intro)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurrences <- str_count(my_intro, "e")
# Write a function `double()` that takes in a value and
# returns that value times two
double <- function(value) {
value * 2
}
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
minutes_in_two_days <- double(minutes_in_a_day)
# Write a function `cube()` that takes in a value and returns that value cubed
cube <- function(value) {
value^3
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
# Create a function `inches_to_cm` that converts from inches to centimeters
inches_to_cm <- function(inches) {
inches * 2.54
}
# Create a variable `inches_tall` that is your (numeric) height in inches
inches_tall <- 70
# Using your `inches_to_cm` function and your `inches_tall` variable,
# create a variable `cm_tall` that is your height in centimeters
cm_tall <- inches_to_cm(inches_tall)
# Write a function `has_more_zs` to determine which of two strings contains
# more instances of the letter "z". It should take as parameters two string
# variables, and return the argument which has more occurances of the letter "z"
# If neither phrase contains the letter "z", it should return:
# "Neither string contains the letter z."
# If the phrases contain the same number of "z"s, it should return:
# "The strings have the same number of Zs."
# The function must work for both capital and lowercase "z"s.
has_more_zs <- function(String1, String2) {
count1 <- str_count(tolower(String1), "z")
count2 <- str_count(tolower(String2), "z")
if(count1 > count2) {
print("the first string contains more zs")
} else if(count1 < count2) {
print("The second string contains more zs")
} else if(count1 == 0 && count2 == 0) {
print("Neither string contains z")
} else {
print("The strings have the same number of zs")
}
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("hello", "there")
print(more_zs)
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
# Create a vector `without_four` by omitting the fourth element from `movies`
# You should do this using a _negative index_
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
# Create a vector `multiples_of_8` by filtering your `multiples_of_4` variable
# down to only elements that are divisible by 8.
# Create a vector `numbers` that is the numbers 700 through 999
# Using the built in `length()` function, create a variable `numbers_len`
# that is equal to the length of your vector `numbers`
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
# Create a vector `lower_numbers` that the values in your `numbers` vector
# that are lower than `numbers_mean` (you should do this using vector filtering)
# Create a vector `higher_numbers` that the values in your `numbers` vector
# that are higher than `numbers_mean` (again, using vector filtering)
# Lists ------------------------------------------------------------------------
# Create a list called `summary_info` in which you'll store summary information
# about the `numbers` vector above. The list should have the following keys:
# - `length`: in which you'll store the length of the vector
# - `mean`: in which you'll store the mean of the vector
# - `median`: in which you'll store the median of the vector
# Now, write a function called `summarize_vector` that takes in a vector of
# numbers, and returns a list of summary information about that vector
# (including the mean, median, and length)
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
has_more_zs <- function(String1, String2) {
count1 <- str_count(tolower(String1), "z")
count2 <- str_count(tolower(String2), "z")
if(count1 > count2) {
print("the first string contains more zs")
} else if(count1 < count2) {
print("The second string contains more zs")
} else if(count1 == 0 && count2 == 0) {
print("Neither string contains z")
} else {
print("The strings have the same number of zs")
}
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("hello", "there")
has_more_zs <- function(String1, String2) {
count1 <- str_count(tolower(String1), "z")
count2 <- str_count(tolower(String2), "z")
if(count1 > count2) {
print("the first string contains more zs")
} else if(count1 < count2) {
print("The second string contains more zs")
} else if(count1 == 0 && count2 == 0) {
print("Neither string contains z")
} else {
print("The strings have the same number of zs")
}
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("zeze", "there")
has_more_zs <- function(String1, String2) {
count1 <- str_count(tolower(String1), "z")
count2 <- str_count(tolower(String2), "z")
if(count1 > count2) {
print("the first string contains more zs")
} else if(count1 < count2) {
print("The second string contains more zs")
} else if(count1 == 0 && count2 == 0) {
print("Neither string contains z")
} else {
print("The strings have the same number of zs")
}
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("zeze", "zeze")
remove_digits <- function(strings) {
str_extract(strings, "[a-z]+")
}
remove_digits <- function(strings) {
str_extract(strings, "[a-z]+")
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
remove_digits <- function(strings) {
str_extract(strings, "[0-9]+")
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
remove_digits <- function(strings) {
str_extract_all(strings, "[a-z]+")
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
remove_digits <- function(strings) {
str_extract(strings, "[a-z]+")
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
remove_digits <- function(strings) {
gsub('[[:digit:]]+', '', strings)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
double() <- function(value) {
value * 2
}
remove_digits <- function(strings) {
gsub('[[:digit:]]+', '', strings)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
summary_1_to_100 <- summarize_vector(c(1:100))
summarize_vector <- function(nums) {
list("length" = length(nums), "mean" = mean(nums), "median" = median(nums))
}
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector(c(1:100))
summarize_vector <- function(nums) {
list("length" = length(nums), "mean" = mean(nums), "median" = median(nums))
}
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector(c(1:100))
print(summary_1_to_100)
print(mean(c(1:100)))
install.packages('rlang')
remove.packages("ggplot2", lib="~/R/win-library/3.6")
install.packages('ggplot2')
library(rsconnect)
deployApp()
setwd("~/Info201/team_won")
deployApp()
library(rsconnect)
deployApp()
library(ggplot2)
install.packages(''ggplot)
install.packages('ggplot')
deployApp()
options("repos")
install.packages("rlang")
detach("package:ggplot2", unload = TRUE)
library(ggplot2)
detach("package:ggplot2", unload = TRUE)
library(ggplot2)
library(rlang)
library(tidyverse)
library(shiny)
deployApp()
library(rsconnect)
deployApp()
setwd("~/Info201/team_won")
deployApp()
remove.packages("ggplot2", lib="~/R/win-library/3.6")
remove.packages("rlang", lib="~/R/win-library/3.6")
install.packages('rlang')
install.packages("rlang")
install.packages("ggplot2")
shiny::runApp()
library(shiny)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(rlang)
runApp()
combined_sleep_data <- read.csv("data/combined_sleep_gpa.csv")
runApp()
sleep_data <- read.csv("data/sleep_study.csv") %>%
select(GPA, DepressionScore, AnxietyScore,
StressScore, AlcoholUse, AverageSleep, Drinks)
combined_sleep_data <- read.csv("data/combined_sleep_gpa.csv")
runApp()
library(dplyr)
library(tidyverse)
library(ggplot2)
library(rlang)
runApp()
install.packages(c("dplyr", "ggplot2", "rlang", "shiny", "tidyverse"))
library(shiny)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(rlang)
library(shiny)
library(tidyverse)
library(ggplot2)
library(rlang)
install.packages("shiny")
install.packages("shiny")
library(shiny)
runApp()
shiny::runApp()
library(shinythemes)
library(shinythemes)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
url <- https://www.psytoolkit.org/cgi-bin/psy2.4.1/survey?s=A4fYA
runApp()
url <- www.psytoolkit.org/cgi-bin/psy2.4.1/survey?s=A4fYA
url <- "www.psytoolkit.org/cgi-bin/psy2.4.1/survey?s=A4fYA"
runApp()
url <- a("Survey", href = "www.psytoolkit.org/cgi-bin/psy2.4.1/survey?s=A4fYA")
View(url)
runApp()
url <- a("Survey", href = "https://www.psytoolkit.org/cgi-bin/psy2.4.1/survey?s=A4fYA")
runApp()
DASSScore <- read.csv("data/dassscore.csv")
View(DASSScore)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
